<application>
  <component name="LanguageInjectionConfiguration">
    <injection language="encoding-reference" injector-id="java">
      <display-name>Charset Name</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("forName").withParameters("java.lang.String").definedInClass("java.nio.charset.Charset"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getBytes").withParameters("java.lang.String").definedInClass("java.lang.String"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("isSupported").withParameters("java.lang.String").definedInClass("java.nio.charset.Charset"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setCharacterEncoding").withParameters("java.lang.String").definedInClass(psiClass().withQualifiedName(string().oneOf("javax.servlet.ServletResponse", "jakarta.servlet.ServletResponse"))))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("toString").withParameters("java.lang.String").definedInClass("java.io.ByteArrayOutputStream"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("InputStreamReader").withParameters("java.io.InputStream", "java.lang.String").definedInClass("java.io.InputStreamReader"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("OutputStreamWriter").withParameters("java.io.OutputStream", "java.lang.String").definedInClass("java.io.OutputStreamWriter"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("PrintStream").withParameters("java.io.File", "java.lang.String").definedInClass("java.io.PrintStream"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("PrintStream").withParameters("java.lang.String", "java.lang.String").definedInClass("java.io.PrintStream"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("String").withParameters("byte[]", "java.lang.String").definedInClass("java.lang.String"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLEventReader").withParameters("java.io.InputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLEventWriter").withParameters("java.io.OutputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLStreamReader").withParameters("java.io.InputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createXMLStreamWriter").withParameters("java.io.OutputStream", "java.lang.String").definedInClass("javax.xml.stream.XMLInputFactory"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("decode").withParameters("java.lang.String", "java.lang.String").definedInClass("java.net.URLDecoder"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("encode").withParameters("java.lang.String", "java.lang.String").definedInClass("java.net.URLEncoder"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newReader").withParameters("java.nio.channels.ReadableByteChannel", "java.lang.String").definedInClass("java.nio.channels.Channels"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("newWriter").withParameters("java.nio.channels.WritableByteChannel", "java.lang.String").definedInClass("java.nio.channels.Channels"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("PrintStream").withParameters("java.io.OutputStream", "boolean", "java.lang.String").definedInClass("java.io.PrintStream"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(3, psiMethod().withName("String").withParameters("byte[]", "int", "int", "java.lang.String").definedInClass("java.lang.String"))]]></place>
    </injection>
    <injection language="JSONPath" injector-id="java">
      <display-name>JsonAsserter (com.jayway.jsonpath)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertEquals").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertNotDefined").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertNotNull").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertNull").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("assertThat").definedInClass("com.jayway.jsonassert.JsonAsserter"))]]></place>
    </injection>
    <injection language="MariaDB" injector-id="java">
      <display-name>NamedNativeQuery.query (javax.persistence)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiMethod().withName("query").withParameters().definedInClass("javax.persistence.NamedNativeQuery")]]></place>
    </injection>
    <injection language="HQL" injector-id="java">
      <display-name>Query.from (com.ghx.tpm.dao.domain.annotation)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiMethod().withName("from").withParameters().definedInClass("com.ghx.tpm.dao.domain.annotation.Query")]]></place>
    </injection>
    <injection language="MySQL" injector-id="java">
      <display-name>QueryProducer (org.hibernate.query)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiMethod().withName("addSynchronizedEntityName").withParameters("java.lang.String").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("addSynchronizedQuerySpace").withParameters("java.lang.String").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("createNamedQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("createNamedQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("createNativeQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("createNativeQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("createNativeQuery").withParameters("java.lang.String", "java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("createQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("createQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("createSQLQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("getNamedNativeQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("getNamedQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("getNamedSQLQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer")]]></place>
      <place><![CDATA[psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Calendar", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Date", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.lang.Object[]").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.lang.Object[]", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.util.Collection").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.util.Collection", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiMethod().withName("setResultSetMapping").withParameters("java.lang.String").definedInClass("org.hibernate.query.NativeQuery")]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("addSynchronizedEntityName").withParameters("java.lang.String").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("addSynchronizedQuerySpace").withParameters("java.lang.String").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createNamedQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createNamedQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createNativeQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createNativeQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createNativeQuery").withParameters("java.lang.String", "java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createSQLQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getNamedNativeQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getNamedQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getNamedSQLQuery").withParameters("java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place disabled="true"><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Calendar", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Date", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.lang.Object[]").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.lang.Object[]", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.util.Collection").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.util.Collection", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setResultSetMapping").withParameters("java.lang.String").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createNamedQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createNativeQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createNativeQuery").withParameters("java.lang.String", "java.lang.String").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.query.QueryProducer"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Calendar", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Date", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.lang.Object[]").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.lang.Object[]", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.util.Collection").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.util.Collection", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Calendar", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("setParameter").withParameters("java.lang.String", "java.util.Date", "javax.persistence.TemporalType").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.lang.Object[]", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("setParameterList").withParameters("java.lang.String", "java.util.Collection", "org.hibernate.type.Type").definedInClass("org.hibernate.query.NativeQuery"))]]></place>
    </injection>
    <injection language="file-reference" injector-id="java">
      <display-name>Resources.getResource (com.google.common.io)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getResource").withParameters("java.lang.String").definedInClass("com.google.common.io.Resources"))]]></place>
    </injection>
    <injection language="RegExp" injector-id="java">
      <display-name>Scanner (java.util)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("findInLine").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("findWithinHorizon").withParameters("java.lang.String", "int").definedInClass("java.util.Scanner"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("hasNext").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("next").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("skip").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("useDelimiter").withParameters("java.lang.String").definedInClass("java.util.Scanner"))]]></place>
    </injection>
    <injection language="HQL" injector-id="java">
      <display-name>SharedSessionContract.createQuery (org.hibernate)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiMethod().withName("byId").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("byMultipleIds").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("byNaturalId").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("bySimpleNaturalId").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("contains").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("createFilter").withParameters("java.lang.Object", "java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("createNamedQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("createQuery").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("createQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("delete").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("disableFetchProfile").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("disableFilter").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("enableFetchProfile").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("enableFilter").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("getEmail").withParameters().definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("getEnabledFilter").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("getEntityName").withParameters("java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("getExternalUserId").withParameters().definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("getFirstName").withParameters().definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("getLastName").withParameters().definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("getLogin").withParameters().definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("getPassword").withParameters().definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("isFetchProfileEnabled").withParameters("java.lang.String").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("lock").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockMode").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("merge").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("persist").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("refresh").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("refresh").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("replicate").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.ReplicationMode").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("save").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("saveOrUpdate").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiMethod().withName("setEmail").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("setExternalUserId").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("setFirstName").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("setLastName").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("setLogin").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("setPassword").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User")]]></place>
      <place><![CDATA[psiMethod().withName("update").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session")]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("byId").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("byMultipleIds").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("byNaturalId").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("bySimpleNaturalId").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("contains").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createFilter").withParameters("java.lang.Object", "java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createNamedQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createQuery").withParameters("java.lang.String").definedInClass("javax.persistence.EntityManager"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createQuery").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createQuery").withParameters("java.lang.String").definedInClass("org.hibernate.SharedSessionContract"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("javax.persistence.EntityManager"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("delete").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("disableFetchProfile").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("disableFilter").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("enableFetchProfile").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("enableFilter").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getEnabledFilter").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("getEntityName").withParameters("java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("isFetchProfileEnabled").withParameters("java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("lock").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("merge").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("persist").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("refresh").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("refresh").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("replicate").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.ReplicationMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("save").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("saveOrUpdate").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setEmail").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setExternalUserId").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setFirstName").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setLastName").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setLogin").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("setPassword").withParameters("java.lang.String").definedInClass("com.requisitionproduct.entity.User"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("update").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("contains").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createFilter").withParameters("java.lang.Object", "java.lang.String").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createNamedQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("createQuery").withParameters("java.lang.String", "java.lang.Class").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("delete").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("lock").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("merge").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("persist").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("refresh").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("refresh").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("replicate").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.ReplicationMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("save").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("saveOrUpdate").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(1, psiMethod().withName("update").withParameters("java.lang.String", "java.lang.Object").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("get").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("load").withParameters("java.lang.String", "java.io.Serializable", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("lock").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockMode").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("refresh").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.LockOptions").definedInClass("org.hibernate.Session"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(2, psiMethod().withName("replicate").withParameters("java.lang.String", "java.lang.Object", "org.hibernate.ReplicationMode").definedInClass("org.hibernate.Session"))]]></place>
    </injection>
    <injection language="MySQL" injector-id="java">
      <display-name>SharedSessionContract.createSQLQuery (org.hibernate)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("createSQLQuery").withParameters("java.lang.String").definedInClass("org.hibernate.SharedSessionContract"))]]></place>
    </injection>
    <injection language="file-reference" injector-id="java">
      <display-name>Sql.scripts (org.springframework.test.context.jdbc)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiMethod().withName("scripts").withParameters().definedInClass("org.springframework.test.context.jdbc.Sql")]]></place>
    </injection>
    <injection language="RegExp" injector-id="java">
      <display-name>String (java.lang)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matches").withParameters("java.lang.String").definedInClass("java.lang.String"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("replaceAll").withParameters("java.lang.String", "java.lang.String").definedInClass("java.lang.String"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("replaceFirst").withParameters("java.lang.String", "java.lang.String").definedInClass("java.lang.String"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("split").withParameters("java.lang.String").definedInClass("java.lang.String"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("split").withParameters("java.lang.String", "int").definedInClass("java.lang.String"))]]></place>
    </injection>
    <injection language="RegExp" injector-id="java">
      <display-name>StringSubject (com.google.common.truth)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("containsMatch").definedInClass("com.google.common.truth.StringSubject"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("doesNotContainMatch").definedInClass("com.google.common.truth.StringSubject"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("doesNotMatch").definedInClass("com.google.common.truth.StringSubject"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("matches").definedInClass("com.google.common.truth.StringSubject"))]]></place>
    </injection>
    <injection language="MySQL" injector-id="java">
      <display-name>Subselect.value (org.hibernate.annotations)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiMethod().withName("value").withParameters().definedInClass("org.hibernate.annotations.Subselect")]]></place>
    </injection>
    <injection language="SpEL" injector-id="java">
      <display-name>Value.value (org.springframework.beans.factory.annotation)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiMethod().withName("value").withParameters().definedInClass("org.springframework.beans.factory.annotation.Value")]]></place>
    </injection>
    <injection language="JSONPath" injector-id="java">
      <display-name>WriteContext (com.jayway.jsonpath)</display-name>
      <single-file value="true" />
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("add").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("delete").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("map").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("put").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("renameKey").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
      <place><![CDATA[psiParameter().ofMethod(0, psiMethod().withName("set").definedInClass("com.jayway.jsonpath.WriteContext"))]]></place>
    </injection>
    <injection language="JSON" injector-id="sql">
      <display-name>ClickHouse JSON</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("ClickHouse").functionArgument(0, sqlFunctionCall().name("visitParamHas", "visitParamExtractUInt", "visitParamExtractInt", "visitParamExtractFloat", "visitParamExtractBool", "visitParamExtractRaw", "visitParamExtractString").params(sqlExpressions().count(2)))]]></place>
      <place><![CDATA[sqlElement().forDialects("ClickHouse").insertWithFormatInput("JSON")]]></place>
    </injection>
    <injection language="JSON" injector-id="sql">
      <display-name>Oracle JSON</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, -1, 1, sqlFunctionCall().name("json_array"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("json_query", "json_value", "json_array_agg"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("json_table"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, -1, 2, sqlFunctionCall().name("json_object"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("json_object_agg"))]]></place>
    </injection>
    <injection language="RegExp" injector-id="sql">
      <display-name>Oracle RegExp</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_count").params(sqlExpressions().count(2, 4)))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_instr").params(sqlExpressions().count(2, 7)))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_like").params(sqlExpressions().count(2, 3)))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_replace", "regexp_substr").params(sqlExpressions().count(2, 6)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Oracle XPath</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmlquery", "xmlexists"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmltable"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, -2, 2, sqlFunctionCall().name("updatexml"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("appendchildxml", "insertxmlafter", "insertxmlbefore").params(sqlExpressions().count(3, 4)))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("extract", "extractvalue", "deletexml", "existsnode").params(sqlExpressions().count(2, 3)))]]></place>
      <place><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("insertchildxml", "insertchildxmlafter", "insertchildxmlbefore").params(sqlExpressions().count(4, 5)))]]></place>
    </injection>
    <injection language="RegExp" injector-id="sql">
      <display-name>PostgreSQL RegExp</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").binaryExpressionArgument(1, sqlBinaryExpression().left(sqlExpression().withType("text")).operationNames("~", "~*", "!~", "!~*"))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("regexp_replace").params(sqlExpressions().count(3, 4)))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("substr", "substring", "regexp_match", "regexp_matches", "regexp_split_to_array", "regexp_split_to_table").params(sqlExpressions().count(2, 3)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>PostgreSQL XPath</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(0, sqlFunctionCall().name("xmlexists", "xmltable").params(sqlExpressions().count(2)))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(0, sqlFunctionCall().name("xpath", "xpath_exists").params(sqlExpressions().count(2, 3)))]]></place>
    </injection>
    <injection language="PostgreSQL" injector-id="sql">
      <display-name>PostgreSQL dblink</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(0, sqlFunctionCall().name("dblink", "dblink_exec").params(sqlExpressions().count(1, 2).atOpt(1, sqlExpression().withType("boolean"))))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink", "dblink_exec").params(sqlExpressions().count(2, 3)))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink_open").params(sqlExpressions().count(2, 3).atOpt(2, sqlExpression().withType("boolean"))))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink_send_query").params(sqlExpressions().count(2)))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(2, sqlFunctionCall().name("dblink_open").params(sqlExpressions().count(3, 4)))]]></place>
    </injection>
    <injection language="XML" injector-id="sql">
      <display-name>Sybase XML</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("Sybase").binaryExpressionArgument(1, sqlBinaryExpression().operation(leafTokens("xmltest").or("not", "xmltest")))]]></place>
      <place><![CDATA[sqlElement().forDialects("Sybase").functionArgument(0, sqlFunctionCall().name("xmlparse", "xmlvalidate"))]]></place>
      <place><![CDATA[sqlElement().forDialects("Sybase").functionArgument(1, sqlFunctionCall().name("xmlextract"))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Sybase XPath</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("Sybase").binaryExpressionArgument(0, sqlBinaryExpression().operation(leafTokens("xmltest").or("not", "xmltest")))]]></place>
      <place><![CDATA[sqlElement().forDialects("Sybase").functionArgument(0, sqlFunctionCall().name("xmlextract"))]]></place>
    </injection>
    <injection language="InjectedFreeMarker" injector-id="xml">
      <display-name>a/@href</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("href")).withParent(xmlTag().withLocalName(string().equalTo("a")).withNamespace(string().equalTo("http://www.w3.org/1999/html")))]]></place>
    </injection>
    <injection language="file-reference" injector-id="xml">
      <display-name>include/@file</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("file")).withParent(xmlTag().withLocalName(string().equalTo("include")).withNamespace(string().equalTo("http://www.liquibase.org/xml/ns/dbchangelog")))]]></place>
    </injection>
    <injection language="file-reference" injector-id="xml">
      <display-name>includeAll/@path</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("path")).withParent(xmlTag().withLocalName(string().equalTo("includeAll")).withNamespace(string().equalTo("http://www.liquibase.org/xml/ns/dbchangelog")))]]></place>
    </injection>
    <injection language="JavaScript" injector-id="xml">
      <display-name>mongo</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlTag().withLocalName(string().equalTo("mongo")).withNamespace(string().equalTo("http://www.liquibase.org/xml/ns/dbchangelog-ext"))]]></place>
    </injection>
    <injection language="SpringPlaceholderReference" injector-id="xml">
      <display-name>property/@value</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("value")).withParent(xmlTag().withLocalName(string().equalTo("property")).withNamespace(string().equalTo("http://www.springframework.org/schema/beans")))]]></place>
    </injection>
    <injection language="MySQL" injector-id="xml">
      <display-name>rollback</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlTag().withLocalName(string().equalTo("rollback")).withNamespace(string().equalTo("http://www.liquibase.org/xml/ns/dbchangelog"))]]></place>
    </injection>
    <injection language="MySQL" injector-id="xml">
      <display-name>sql</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlTag().withLocalName(string().equalTo("sql")).withNamespace(string().equalTo("http://www.liquibase.org/xml/ns/dbchangelog"))]]></place>
    </injection>
    <injection language="MySQL" injector-id="xml">
      <display-name>sqlCheck</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlTag().withLocalName(string().equalTo("sqlCheck")).withNamespace(string().equalTo("http://www.liquibase.org/xml/ns/dbchangelog"))]]></place>
    </injection>
    <injection language="file-reference" injector-id="xml">
      <display-name>sqlFile/@path</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("path")).withParent(xmlTag().withLocalName(string().equalTo("sqlFile")).withNamespace(string().equalTo("http://www.liquibase.org/xml/ns/dbchangelog")))]]></place>
    </injection>
  </component>
</application>